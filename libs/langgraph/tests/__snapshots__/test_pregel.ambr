# serializer version: 1
# name: test_multiple_sinks_subgraphs
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	uno(uno)
  	dos(dos)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> uno;
  	uno -.-> dos;
  	uno -.-> subgraph\3aone;
  	dos --> __end__;
  	subgraph\3a__end__ --> __end__;
  	subgraph subgraph
  	subgraph\3aone(one)
  	subgraph\3atwo(two)
  	subgraph\3athree(three)
  	subgraph\3a__end__(<p>__end__</p>)
  	subgraph\3aone -.-> subgraph\3athree;
  	subgraph\3aone -.-> subgraph\3atwo;
  	subgraph\3athree --> subgraph\3a__end__;
  	subgraph\3atwo --> subgraph\3a__end__;
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_nested_graph
  '''
  graph TD;
  	__start__ --> inner;
  	inner --> side;
  	side --> __end__;
  
  '''
# ---
# name: test_nested_graph.1
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	side(side)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> inner\3aup;
  	inner\3aup --> side;
  	side --> __end__;
  	subgraph inner
  	inner\3aup(up)
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_nested_graph_xray
  dict({
    'edges': list([
      dict({
        'conditional': True,
        'source': '__start__',
        'target': 'tool_one',
      }),
      dict({
        'conditional': True,
        'source': '__start__',
        'target': 'tool_three',
      }),
      dict({
        'conditional': True,
        'source': '__start__',
        'target': 'tool_two:__start__',
      }),
      dict({
        'source': 'tool_one',
        'target': '__end__',
      }),
      dict({
        'source': 'tool_three',
        'target': '__end__',
      }),
      dict({
        'source': 'tool_two:__end__',
        'target': '__end__',
      }),
      dict({
        'conditional': True,
        'source': 'tool_two:__start__',
        'target': 'tool_two:tool_two_fast',
      }),
      dict({
        'conditional': True,
        'source': 'tool_two:__start__',
        'target': 'tool_two:tool_two_slow',
      }),
      dict({
        'source': 'tool_two:tool_two_fast',
        'target': 'tool_two:__end__',
      }),
      dict({
        'source': 'tool_two:tool_two_slow',
        'target': 'tool_two:__end__',
      }),
    ]),
    'nodes': list([
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': '__start__',
        }),
        'id': '__start__',
        'type': 'runnable',
      }),
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': 'tool_one',
        }),
        'id': 'tool_one',
        'type': 'runnable',
      }),
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': 'tool_three',
        }),
        'id': 'tool_three',
        'type': 'runnable',
      }),
      dict({
        'id': '__end__',
      }),
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': 'tool_two:__start__',
        }),
        'id': 'tool_two:__start__',
        'type': 'runnable',
      }),
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': 'tool_two:tool_two_slow',
        }),
        'id': 'tool_two:tool_two_slow',
        'type': 'runnable',
      }),
      dict({
        'data': dict({
          'id': list([
            'langgraph',
            '_internal',
            '_runnable',
            'RunnableCallable',
          ]),
          'name': 'tool_two:tool_two_fast',
        }),
        'id': 'tool_two:tool_two_fast',
        'type': 'runnable',
      }),
      dict({
        'id': 'tool_two:__end__',
      }),
    ]),
  })
# ---
# name: test_nested_graph_xray.1
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	tool_one(tool_one)
  	tool_three(tool_three)
  	__end__([<p>__end__</p>]):::last
  	__start__ -.-> tool_one;
  	__start__ -.-> tool_three;
  	__start__ -.-> tool_two\3a__start__;
  	tool_one --> __end__;
  	tool_three --> __end__;
  	tool_two\3a__end__ --> __end__;
  	subgraph tool_two
  	tool_two\3a__start__(<p>__start__</p>)
  	tool_two\3atool_two_slow(tool_two_slow)
  	tool_two\3atool_two_fast(tool_two_fast)
  	tool_two\3a__end__(<p>__end__</p>)
  	tool_two\3a__start__ -.-> tool_two\3atool_two_fast;
  	tool_two\3a__start__ -.-> tool_two\3atool_two_slow;
  	tool_two\3atool_two_fast --> tool_two\3a__end__;
  	tool_two\3atool_two_slow --> tool_two\3a__end__;
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_repeat_condition
  '''
  graph TD;
  	Call\20Tool -.-> Chart\20Generator;
  	Call\20Tool -.-> Researcher;
  	Chart\20Generator -. &nbsp;call_tool&nbsp; .-> Call\20Tool;
  	Chart\20Generator -. &nbsp;continue&nbsp; .-> Researcher;
  	Chart\20Generator -. &nbsp;end&nbsp; .-> __end__;
  	Researcher -. &nbsp;call_tool&nbsp; .-> Call\20Tool;
  	Researcher -. &nbsp;continue&nbsp; .-> Chart\20Generator;
  	Researcher -. &nbsp;end&nbsp; .-> __end__;
  	__start__ --> Researcher;
  	Researcher -. &nbsp;redo&nbsp; .-> Researcher;
  
  '''
# ---
# name: test_xray_bool
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	gp_one(gp_one)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> gp_one;
  	gp_one -. &nbsp;1&nbsp; .-> __end__;
  	gp_one -. &nbsp;0&nbsp; .-> gp_two\3a__start__;
  	gp_two\3a__end__ --> gp_one;
  	subgraph gp_two
  	gp_two\3a__start__(<p>__start__</p>)
  	gp_two\3ap_one(p_one)
  	gp_two\3a__end__(<p>__end__</p>)
  	gp_two\3a__start__ --> gp_two\3ap_one;
  	gp_two\3ap_one -. &nbsp;1&nbsp; .-> gp_two\3a__end__;
  	gp_two\3ap_one -. &nbsp;0&nbsp; .-> gp_two\3ap_two\3a__start__;
  	gp_two\3ap_two\3a__end__ --> gp_two\3ap_one;
  	subgraph p_two
  	gp_two\3ap_two\3a__start__(<p>__start__</p>)
  	gp_two\3ap_two\3ac_one(c_one)
  	gp_two\3ap_two\3ac_two(c_two)
  	gp_two\3ap_two\3a__end__(<p>__end__</p>)
  	gp_two\3ap_two\3a__start__ --> gp_two\3ap_two\3ac_one;
  	gp_two\3ap_two\3ac_one -. &nbsp;1&nbsp; .-> gp_two\3ap_two\3a__end__;
  	gp_two\3ap_two\3ac_one -. &nbsp;0&nbsp; .-> gp_two\3ap_two\3ac_two;
  	gp_two\3ap_two\3ac_two --> gp_two\3ap_two\3ac_one;
  	end
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_xray_issue
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	p_one(p_one)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> p_one;
  	p_one -. &nbsp;1&nbsp; .-> __end__;
  	p_one -. &nbsp;0&nbsp; .-> p_two\3a__start__;
  	p_two\3a__end__ --> p_one;
  	subgraph p_two
  	p_two\3a__start__(<p>__start__</p>)
  	p_two\3ac_one(c_one)
  	p_two\3ac_two(c_two)
  	p_two\3a__end__(<p>__end__</p>)
  	p_two\3a__start__ --> p_two\3ac_one;
  	p_two\3ac_one -. &nbsp;1&nbsp; .-> p_two\3a__end__;
  	p_two\3ac_one -. &nbsp;0&nbsp; .-> p_two\3ac_two;
  	p_two\3ac_two --> p_two\3ac_one;
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
